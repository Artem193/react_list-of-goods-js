{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","rev","alphabet","length","App","useState","visibleGoods","setVisibleGoods","sortField","setSortField","searchClass","allClass","includes","classButton","buttonName","classButtonActive","className","type","onClick","prevGoods","sort","a","b","localeCompare","reverse","prevSortField","split","map","good","ReactDOM","render","document","getElementById"],"mappings":"iOAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAM,UACNC,EAAW,WAEXC,EAAS,SAGTC,EAAM,WACjB,MAAwCC,mBAASL,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAc,SAACC,GACnB,QAAIA,EAASC,SAASX,IAOlBY,EAAc,SAACC,EAAYC,GAC/B,OAAIP,EAAUI,SAASE,GACdC,EAGH,GAAN,OAAUA,EAAV,cAmCF,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWH,EAAYX,EAAU,kBACjCgB,QAtCa,WACnBX,GAAgB,SAAAY,GAAS,OACvBT,EAAYF,GACR,YAAIW,GAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,cAAcF,MAC9C,YAAIF,GAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,SAEpDb,EAAaC,EAAYF,GA9BF,mBA8B6BN,IA6BhD,iCAQA,wBACEe,KAAK,SACLD,UAAWH,EAAYV,EAAQ,qBAC/Be,QArCW,WACjBX,GAAgB,SAAAY,GAAS,OACvBT,EAAYF,GACR,YAAIW,GAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEnB,OAASkB,EAAElB,UAC3C,YAAIgB,GAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAElB,OAASmB,EAAEnB,aAEjDM,EAAaC,EAAYF,GArCJ,iBAqC6BL,IA4B9C,4BAQA,wBACEc,KAAK,SACLD,UAAWH,EAAYZ,EAAK,qBAC5BiB,QApCQ,WACdX,GAAgB,SAAAY,GAAS,OAAK,YAAIA,GAAWK,aAC7Cf,GAAa,SAAAgB,GAAa,OACxBf,EAAYe,GACRA,EAAcC,MAAM,KAAK,GAD7B,UAEOD,EAFP,YAEwBxB,OA4BtB,qBAQCO,EAAUL,OAAS,GAClB,wBACEc,KAAK,SACLD,UAAU,4BACVE,QApCI,WACZX,EAAgBP,GAChBS,EAAa,KA+BP,sBAUJ,6BACGH,EAAaqB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCjHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b450e91e.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const rev = 'reverse';\nexport const alphabet = 'alphabet';\nexport const alphabetRev = 'alphabet reverse';\nexport const length = 'length';\nexport const lengthRev = 'length reverse';\n\nexport const App = () => {\n  const [visibleGoods, setVisibleGoods] = useState(goodsFromServer);\n  const [sortField, setSortField] = useState('');\n\n  const searchClass = (allClass) => {\n    if (allClass.includes(rev)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const classButton = (buttonName, classButtonActive) => {\n    if (sortField.includes(buttonName)) {\n      return classButtonActive;\n    }\n\n    return `${classButtonActive} is-light`;\n  };\n\n  const sortAlphabet = () => {\n    setVisibleGoods(prevGoods => (\n      searchClass(sortField)\n        ? [...prevGoods].sort((a, b) => b.localeCompare(a))\n        : [...prevGoods].sort((a, b) => a.localeCompare(b))\n    ));\n    setSortField(searchClass(sortField) ? alphabetRev : alphabet);\n  };\n\n  const sortLength = () => {\n    setVisibleGoods(prevGoods => (\n      searchClass(sortField)\n        ? [...prevGoods].sort((a, b) => b.length - a.length)\n        : [...prevGoods].sort((a, b) => a.length - b.length)\n    ));\n    setSortField(searchClass(sortField) ? lengthRev : length);\n  };\n\n  const reverse = () => {\n    setVisibleGoods(prevGoods => ([...prevGoods].reverse()));\n    setSortField(prevSortField => (\n      searchClass(prevSortField)\n        ? prevSortField.split(' ')[0]\n        : `${prevSortField} ${rev}`\n    ));\n  };\n\n  const reset = () => {\n    setVisibleGoods(goodsFromServer);\n    setSortField('');\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classButton(alphabet, 'button is-info')}\n          onClick={sortAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classButton(length, 'button is-success')}\n          onClick={sortLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classButton(rev, 'button is-warning')}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {sortField.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}